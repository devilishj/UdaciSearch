Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    the parser took longer because it waits for all the processes and sums the time of them.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

        The parallel crawler is designed to run on multiple threads which provide more available resources. the lack of
        available resources will slow it down, where the sequential was designed to run on a single core with the available
        resources, so it is running optimally while the parallel is running sub-

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        It will always perform better on a multi core computer due to the availability additional cores so it can
        run how it was designed to run.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    The performance measure of the Profiler class is a property of a cross-cutting concern

    (b) What are the join points of the Profiler in the web crawler program?

    methods with the @Profiled annotation are the join points of the profiler


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    I really like Dependency Injection Pattern used in the WebCrawlerMain and Profiler classes. Even though it requires more
    classes, I prefer to keep things separated as much as possible.  It also seems to simplify the tests.

    I also like the Builder Pattern used in the CrawlerConfiguration, CrawlResult, and ParserModule classes.  It helps
    layout the build even before some of it's components have been constructed.  Also at the cost of more coding which
    I don't mind it this case.

    I also like the Proxy Pattern in the ProfilerImpl class.  The fact that it provides a static method for an object
    that is basically a customizable interface.  I have this in my notes of things to learn more about.

    And honorable mention has to go to the Singleton Pattern which is one of my favs now... even though I didn't really
    have to implement it's use myself, I smiled every time I saw it annotated.  I just love the idea of dictating
    that there can only be 1 instance of a class in use at a time.



